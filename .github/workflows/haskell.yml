name: Haskell

defaults:
  run:
    shell: bash

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.8.4", "8.6.5", "8.8.3", "8.10.2"]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-haskell@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Configure
        run: cabal configure --write-ghc-environment-files=ghc8.4.4+

      - name: Restore cabal cache
        uses: haskell-works/cabal-cache-action@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
          BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
          BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        with:
          args: |
            sync-from-archive \
              --threads       "$BINARY_CACHE_THREADS" \
              --archive-uri   "$BINARY_CACHE_URI" \
              --region        "$BINARY_CACHE_REGION" \
              --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Build
        run: cabal build all

      - name: Save cabal cache
        uses: haskell-works/cabal-cache-action@v1
        if: ${{ always() }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
          BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
          BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        with:
          args: |
            sync-to-archive \
              --threads       "$BINARY_CACHE_THREADS" \
              --archive-uri   "$BINARY_CACHE_URI" \
              --region        "$BINARY_CACHE_REGION" \
              --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Build
        run: cabal test all --test-show-details=direct

      - name: Save cabal cache
        uses: haskell-works/cabal-cache-action@v1
        if: ${{ always() }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
          BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
          BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        with:
          args: |
            sync-to-archive \
              --threads       "$BINARY_CACHE_THREADS" \
              --archive-uri   "$BINARY_CACHE_URI" \
              --region        "$BINARY_CACHE_REGION" \
              --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

      - name: Tag release
        run: |
          package_version="$(cat *.cabal | grep '^version:' | cut -d : -f 2 | xargs)"
          if git rev-parse "v${package_verison}" >/dev/null 2>&1; then
            echo "Tag already exists: v${package_verison}"
          else
            git tag "v${package_verison}"
            git push origin "v${package_verison}"
          fi
